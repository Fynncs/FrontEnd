{
    "pipes": [],
    "interfaces": [
        {
            "name": "IModelState",
            "id": "interface-IModelState-462d8adb6c7234f5e4c241be75d68c140277966d045031dcaa0b18293ff8bd9e00522fab61d788da1f7610799ac5071e5a441643994fbb253a7cbff303c86b8d",
            "file": "src/app/core/models/i-state.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { State } from '../enum/state.enum';\r\n\r\n/**\r\n * ModelState Interface\r\n * Basic contract for any model class with state.\r\n */\r\nexport interface IModelState<T> {\r\n  data: T;\r\n  state: State;\r\n  getModifiedAttributes(): (keyof T)[];\r\n  clearModifiedAttributes(): void;\r\n  markAsNew(): void;\r\n  markAsModified(): void;\r\n  markAsDeleted(): void;\r\n  restore(): void;\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 173,
            "description": "<p>ModelState Interface\nBasic contract for any model class with state.</p>\n",
            "rawdescription": "\n\nModelState Interface\nBasic contract for any model class with state.\n",
            "methods": [
                {
                    "name": "clearModifiedAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getModifiedAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "[]",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "markAsDeleted",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "markAsModified",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "markAsNew",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": []
        },
        {
            "name": "IUser",
            "id": "interface-IUser-552b16317307aa2efa7c2289a3a4ce46106ec4fae34bbd3b1343c9884447e9cc3deb461fb00d413ebbeeda1b4b77d783f43c05971522be9965736f3e62355bcb",
            "file": "src/app/core/models/i-user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ModelState } from \"@fynnc.models\";\r\n\r\nexport interface IUser extends ModelState<IUser> {\r\n  id?: number;\r\n  name?: string;\r\n  fullName?: string;\r\n  email?: string;\r\n  phone?: string;\r\n  birthDate?: Date;\r\n  gender?: 'male' | 'female' | 'other' | 'not informed';\r\n  nationality?: string;\r\n  maritalStatus?: 'single' | 'married' | 'divorced' | 'widowed' | 'other';\r\n  profession?: string;\r\n  academicBackground?: string;\r\n  username?: string;\r\n  password?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "academicBackground",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "birthDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"male\" | \"female\" | \"other\" | \"not informed\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "maritalStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"single\" | \"married\" | \"divorced\" | \"widowed\" | \"other\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "nationality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "profession",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "ModelState"
            ]
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-2e79cb9bd4027b879837b58ac9a028c26d7462baaf39cdadd07bb59cdb6f385878d164d2a0af5a510e4b2addc54af1e86225e6ade96b5a4845f2beac1b91c101",
            "file": "src/app/core/components/auth/service/auth.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'https://your-backend.com/api/login'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves the stored token.\n",
                    "description": "<p>Retrieves the stored token.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1447,
                                "end": 1454,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string | null</p>\n"
                        }
                    ]
                },
                {
                    "name": "getUserInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDecodes user information from the token (optional).\n",
                    "description": "<p>Decodes user information from the token (optional).</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1629,
                                "end": 1636,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>any</p>\n"
                        }
                    ]
                },
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the user is authenticated.\n",
                    "description": "<p>Checks if the user is authenticated.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1265,
                                "end": 1272,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>boolean</p>\n"
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMakes the login request to the backend and saves the token.\n",
                    "description": "<p>Makes the login request to the backend and saves the token.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 516,
                                "end": 521,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "email"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 510,
                                "end": 515,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>User&#39;s email.</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 551,
                                "end": 559,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "password"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 545,
                                "end": 550,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>User&#39;s password.</li>\n</ul>\n"
                        },
                        {
                            "tagName": {
                                "pos": 586,
                                "end": 593,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable with the backend response.</p>\n"
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves the token and ends the user's session.\n",
                    "description": "<p>Removes the token and ends the user&#39;s session.</p>\n"
                },
                {
                    "name": "saveToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSaves the token in localStorage after successful authentication.\n",
                    "description": "<p>Saves the token in localStorage after successful authentication.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 886,
                                "end": 891,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "token"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 880,
                                "end": 885,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Token generated after successful authentication.</li>\n</ul>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root' // Garante que o serviço está disponível globalmente\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'https://your-backend.com/api/login'; \r\n\r\n  constructor(private router: Router, private http: HttpClient) {}\r\n\r\n  /**\r\n   * Makes the login request to the backend and saves the token.\r\n   * @param email - User's email.\r\n   * @param password - User's password.\r\n   * @returns Observable with the backend response.\r\n   */\r\n  login(email?: string, password?: string): Observable<any> {\r\n    const body = { email, password };\r\n    return this.http.post(this.apiUrl, body);\r\n  }\r\n\r\n  /**\r\n   * Saves the token in localStorage after successful authentication.\r\n   * @param token - Token generated after successful authentication.\r\n   */\r\n  saveToken(token: string): void {\r\n    localStorage.setItem('token', token);\r\n  }\r\n\r\n  /**\r\n   * Removes the token and ends the user's session.\r\n   */\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  /**\r\n   * Checks if the user is authenticated.\r\n   * @returns boolean\r\n   */\r\n  isAuthenticated(): boolean {\r\n    const token = localStorage.getItem('token');\r\n    return !!token; \r\n  }\r\n\r\n  /**\r\n   * Retrieves the stored token.\r\n   * @returns string | null\r\n   */\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  /**\r\n   * Decodes user information from the token (optional).\r\n   * @returns any\r\n   */\r\n  getUserInfo(): any {\r\n    const token = this.getToken();\r\n    if (!token) return null;\r\n\r\n    try {\r\n      const payload = token.split('.')[1]; \r\n      return JSON.parse(atob(payload));\r\n    } catch (error) {\r\n      console.error('Error decoding the token:', error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "EstadoService",
            "id": "injectable-EstadoService-50d29c449a8bdb606b227661ed4712df46ad55d0d71a162a5adce57a37443ef2479ba044a5f1f3cef9f4e1da04f210e7b03d71fcd31f4fba9356d119791da7d9",
            "file": "src/app/core/services/state.service.ts",
            "properties": [
                {
                    "name": "estadoSubject",
                    "defaultValue": "new BehaviorSubject<Estado>(Estado.ORIGINAL)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getEstado$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Estado>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setEstado",
                    "args": [
                        {
                            "name": "novoEstado",
                            "type": "Estado",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "novoEstado",
                            "type": "Estado",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Estado } from '../enum/state.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EstadoService {\r\n  private estadoSubject = new BehaviorSubject<Estado>(Estado.ORIGINAL);\r\n\r\n  getEstado$(): Observable<Estado> {\r\n    return this.estadoSubject.asObservable();\r\n  }\r\n\r\n  setEstado(novoEstado: Estado): void {\r\n    this.estadoSubject.next(novoEstado);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-8063403df31dbde029db13f89ff6bc342761dddab9bb2e7b374c80642f9240dbbba077a8ba814e87a0816b0d02450629293c115ee58dc7a61c9b92ddc40c7c71",
            "file": "src/app/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMétodo que verifica se o usuário está autenticado.\nSe estiver autenticado, permite o acesso à rota.\nCaso contrário, redireciona para a página de login.\n",
                    "description": "<p>Método que verifica se o usuário está autenticado.\nSe estiver autenticado, permite o acesso à rota.\nCaso contrário, redireciona para a página de login.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 618,
                                "end": 622,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "next"
                            },
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 612,
                                "end": 617,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Snapshot da rota ativada.</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 664,
                                "end": 669,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "state"
                            },
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 658,
                                "end": 663,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Estado da rota.</li>\n</ul>\n"
                        },
                        {
                            "tagName": {
                                "pos": 695,
                                "end": 702,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable<boolean> ou Promise<boolean> ou boolean</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './core/components/auth/service/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  /**\r\n   * Método que verifica se o usuário está autenticado.\r\n   * Se estiver autenticado, permite o acesso à rota.\r\n   * Caso contrário, redireciona para a página de login.\r\n   * @param next - Snapshot da rota ativada.\r\n   * @param state - Estado da rota.\r\n   * @returns Observable<boolean> ou Promise<boolean> ou boolean\r\n   */\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    if (this.authService.isAuthenticated()) {\r\n      return true;\r\n    } else {\r\n      this.router.navigate(['/login']); \r\n      return false;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "ModelState",
            "id": "class-ModelState-7a3c994f2ce7112d8895450a61b138224689e68d1cfbfdf5fa178d1569230988e8ac2722a3ac4f0fedb43a980ca2026f1819d7f1006bf278e6fc6a3b843539eb",
            "file": "src/app/core/models/state.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, Observable } from 'rxjs';\r\nimport { State } from '../enum/state.enum';\r\nimport { IModelState } from '@fynnc.models';\r\n\r\n/**\r\n * Generic class to manage the state of a model.\r\n * Allows tracking modifications, controlling states, and notifying changes through observables.\r\n *\r\n * @template T Type of the model represented by the class.\r\n */\r\nexport class ModelState<T extends Record<string, any>> implements IModelState<T> {\r\n  /** Original data of the model. */\r\n  private _data: T;\r\n\r\n  /** Proxy that intercepts modifications to the data. */\r\n  private _proxy: T;\r\n\r\n  /** Current state of the model (ORIGINAL, NEW, MODIFIED, DELETED). */\r\n  private _state: State;\r\n\r\n  /** Observable that notifies state changes. */\r\n  private _stateSubject: BehaviorSubject<State>;\r\n\r\n  /** Set that stores modified attributes. */\r\n  private _modifiedAttributes: Set<keyof T>;\r\n\r\n  /**\r\n   * Creates an instance of ModelState.\r\n   * @param {T} data - Initial data of the model.\r\n   * @param {State} [state=State.NEW] - Initial state of the model.\r\n   */\r\n  constructor(data: T, state: State = State.NEW) {\r\n    this._data = { ...data };\r\n    this._state = state;\r\n    this._stateSubject = new BehaviorSubject<State>(this._state);\r\n    this._modifiedAttributes = new Set<keyof T>();\r\n\r\n    this._proxy = this._createProxy(this._data);\r\n  }\r\n\r\n  /**\r\n   * Creates a Proxy to intercept changes to the model's data.\r\n   * @param {T} obj - Original model object.\r\n   * @returns {T} Proxy of the model object.\r\n   * @private\r\n   */\r\n  private _createProxy(obj: T): T {\r\n    return new Proxy(obj, {\r\n      set: (target, property, value) => {\r\n        if (typeof property === 'string' && property in target) {\r\n          const key = property as keyof T;\r\n          if (typeof value === 'object' && value !== null && !(value instanceof Date)) {\r\n            value = this._createProxy(value); \r\n          }\r\n          if (target[key] !== value) {\r\n            this._modifiedAttributes.add(key);\r\n            target[key] = value;\r\n            if (this._state === State.ORIGINAL) {\r\n              this.markAsModified();\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the model's data through the Proxy.\r\n   * @returns {T} Model data.\r\n   */\r\n  get data(): T {\r\n    return this._proxy;\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable that notifies changes in the model's state.\r\n   * @returns {Observable<State>} Observable of the state.\r\n   */\r\n  get state$(): Observable<State> {\r\n    return this._stateSubject.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Returns the current state of the model.\r\n   * @returns {State} Current model state.\r\n   */\r\n  get state(): State {\r\n    return this._state;\r\n  }\r\n\r\n  /**\r\n   * Changes the current state of the model and notifies observers.\r\n   * @param {State} newState - New state to be set.\r\n   * @private\r\n   */\r\n  private setState(newState: State): void {\r\n    this._state = newState;\r\n    this._stateSubject.next(newState);\r\n  }\r\n\r\n  /**\r\n   * Marks the model as NEW.\r\n   */\r\n  markAsNew(): void {\r\n    this.setState(State.NEW);\r\n  }\r\n\r\n  /**\r\n   * Marks the model as MODIFIED, if applicable.\r\n   */\r\n  markAsModified(): void {\r\n    if (this._state !== State.NEW && this._state !== State.DELETED) {\r\n      this.setState(State.MODIFIED);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marks the model as DELETED, if allowed.\r\n   * @throws {Error} Throws an error if the model is in the NEW state.\r\n   */\r\n  markAsDeleted(): void {\r\n    if (this._state === State.NEW) {\r\n      throw new Error('New items cannot be marked as deleted.');\r\n    }\r\n    this.setState(State.DELETED);\r\n  }\r\n\r\n  /**\r\n   * Restores the model to the ORIGINAL state.\r\n   * Clears the modified attributes.\r\n   */\r\n  restore(): void {\r\n    if (this._state === State.DELETED) {\r\n      this.setState(State.ORIGINAL);\r\n    }\r\n    this._modifiedAttributes.clear();\r\n  }\r\n\r\n  /**\r\n   * Gets a list of modified attributes in the model.\r\n   * @returns {(keyof T)[]} List of modified attributes.\r\n   */\r\n  getModifiedAttributes(): (keyof T)[] {\r\n    return Array.from(this._modifiedAttributes);\r\n  }\r\n\r\n  /**\r\n   * Clears all attributes marked as modified.\r\n   */\r\n  clearModifiedAttributes(): void {\r\n    this._modifiedAttributes.clear();\r\n  }\r\n\r\n  /**\r\n   * Checks if the current state is NEW.\r\n   * @returns {boolean} True if the state is NEW.\r\n   */\r\n  isNew(): boolean {\r\n    return this._state === State.NEW;\r\n  }\r\n\r\n  /**\r\n   * Checks if the current state is MODIFIED.\r\n   * @returns {boolean} True if the state is MODIFIED.\r\n   */\r\n  isModified(): boolean {\r\n    return this._state === State.MODIFIED;\r\n  }\r\n\r\n  /**\r\n   * Checks if the current state is DELETED.\r\n   * @returns {boolean} True if the state is DELETED.\r\n   */\r\n  isDeleted(): boolean {\r\n    return this._state === State.DELETED;\r\n  }\r\n\r\n  /**\r\n   * Checks if the current state is ORIGINAL.\r\n   * @returns {boolean} True if the state is ORIGINAL.\r\n   */\r\n  isOriginal(): boolean {\r\n    return this._state === State.ORIGINAL;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Creates an instance of ModelState.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "state",
                        "type": "State",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "State.NEW"
                    }
                ],
                "line": 25,
                "rawdescription": "\n\nCreates an instance of ModelState.\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 958,
                            "end": 962,
                            "kind": 80,
                            "id": 0,
                            "flags": 16842752,
                            "transformFlags": 0,
                            "escapedText": "data"
                        },
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 948,
                            "end": 953,
                            "kind": 80,
                            "id": 0,
                            "flags": 16842752,
                            "transformFlags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>Initial data of the model.</li>\n</ul>\n",
                        "typeExpression": {
                            "pos": 954,
                            "end": 957,
                            "kind": 309,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "type": {
                                "pos": 955,
                                "end": 956,
                                "kind": 183,
                                "id": 0,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "typeName": {
                                    "pos": 955,
                                    "end": 956,
                                    "kind": 80,
                                    "id": 0,
                                    "flags": 16777216,
                                    "transformFlags": 0,
                                    "escapedText": "T"
                                }
                            }
                        }
                    },
                    {
                        "name": {
                            "pos": 1014,
                            "end": 1019,
                            "kind": 80,
                            "id": 0,
                            "flags": 16842752,
                            "transformFlags": 0,
                            "escapedText": "state"
                        },
                        "type": "State",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "State.NEW",
                        "tagName": {
                            "pos": 999,
                            "end": 1004,
                            "kind": 80,
                            "id": 0,
                            "flags": 16842752,
                            "transformFlags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>Initial state of the model.</li>\n</ul>\n",
                        "typeExpression": {
                            "pos": 1005,
                            "end": 1012,
                            "kind": 309,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "type": {
                                "pos": 1006,
                                "end": 1011,
                                "kind": 183,
                                "id": 0,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "typeName": {
                                    "pos": 1006,
                                    "end": 1011,
                                    "kind": 80,
                                    "id": 0,
                                    "flags": 16777216,
                                    "transformFlags": 0,
                                    "escapedText": "State"
                                }
                            }
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "_data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Original data of the model.</p>\n",
                    "line": 13,
                    "rawdescription": "\nOriginal data of the model.",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_modifiedAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Set<T>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Set that stores modified attributes.</p>\n",
                    "line": 25,
                    "rawdescription": "\nSet that stores modified attributes.",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_proxy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Proxy that intercepts modifications to the data.</p>\n",
                    "line": 16,
                    "rawdescription": "\nProxy that intercepts modifications to the data.",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Current state of the model (ORIGINAL, NEW, MODIFIED, DELETED).</p>\n",
                    "line": 19,
                    "rawdescription": "\nCurrent state of the model (ORIGINAL, NEW, MODIFIED, DELETED).",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_stateSubject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<State>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Observable that notifies state changes.</p>\n",
                    "line": 22,
                    "rawdescription": "\nObservable that notifies state changes.",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>Generic class to manage the state of a model.\nAllows tracking modifications, controlling states, and notifying changes through observables.</p>\n",
            "rawdescription": "\n\nGeneric class to manage the state of a model.\nAllows tracking modifications, controlling states, and notifying changes through observables.\n\n",
            "methods": [
                {
                    "name": "_createProxy",
                    "args": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates a Proxy to intercept changes to the model's data.\n",
                    "description": "<p>Creates a Proxy to intercept changes to the model&#39;s data.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1443,
                                "end": 1446,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "obj"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1433,
                                "end": 1438,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Original model object.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 1439,
                                "end": 1442,
                                "kind": 309,
                                "id": 0,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "type": {
                                    "pos": 1440,
                                    "end": 1441,
                                    "kind": 183,
                                    "id": 0,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "typeName": {
                                        "pos": 1440,
                                        "end": 1441,
                                        "kind": 80,
                                        "id": 0,
                                        "flags": 16777216,
                                        "transformFlags": 0,
                                        "escapedText": "T"
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1479,
                                "end": 1486,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Proxy of the model object.</p>\n",
                            "returnType": ""
                        },
                        {
                            "tagName": {
                                "pos": 1525,
                                "end": 1532,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "clearModifiedAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears all attributes marked as modified.\n",
                    "description": "<p>Clears all attributes marked as modified.</p>\n"
                },
                {
                    "name": "getModifiedAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "[]",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets a list of modified attributes in the model.\n",
                    "description": "<p>Gets a list of modified attributes in the model.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 3975,
                                "end": 3982,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>List of modified attributes.</p>\n",
                            "returnType": "[]"
                        }
                    ]
                },
                {
                    "name": "isDeleted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the current state is DELETED.\n",
                    "description": "<p>Checks if the current state is DELETED.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 4707,
                                "end": 4714,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>True if the state is DELETED.</p>\n",
                            "returnType": "boolean"
                        }
                    ]
                },
                {
                    "name": "isModified",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the current state is MODIFIED.\n",
                    "description": "<p>Checks if the current state is MODIFIED.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 4513,
                                "end": 4520,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>True if the state is MODIFIED.</p>\n",
                            "returnType": "boolean"
                        }
                    ]
                },
                {
                    "name": "isNew",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the current state is NEW.\n",
                    "description": "<p>Checks if the current state is NEW.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 4333,
                                "end": 4340,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>True if the state is NEW.</p>\n",
                            "returnType": "boolean"
                        }
                    ]
                },
                {
                    "name": "isOriginal",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the current state is ORIGINAL.\n",
                    "description": "<p>Checks if the current state is ORIGINAL.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 4899,
                                "end": 4906,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>True if the state is ORIGINAL.</p>\n",
                            "returnType": "boolean"
                        }
                    ]
                },
                {
                    "name": "markAsDeleted",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMarks the model as DELETED, if allowed.\n",
                    "description": "<p>Marks the model as DELETED, if allowed.</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "markAsModified",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMarks the model as MODIFIED, if applicable.\n",
                    "description": "<p>Marks the model as MODIFIED, if applicable.</p>\n"
                },
                {
                    "name": "markAsNew",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMarks the model as NEW.\n",
                    "description": "<p>Marks the model as NEW.</p>\n"
                },
                {
                    "name": "restore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRestores the model to the ORIGINAL state.\nClears the modified attributes.\n",
                    "description": "<p>Restores the model to the ORIGINAL state.\nClears the modified attributes.</p>\n"
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "newState",
                            "type": "State",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChanges the current state of the model and notifies observers.\n",
                    "description": "<p>Changes the current state of the model and notifies observers.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2845,
                                "end": 2853,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "newState"
                            },
                            "type": "State",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2831,
                                "end": 2836,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>New state to be set.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 2837,
                                "end": 2844,
                                "kind": 309,
                                "id": 0,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "type": {
                                    "pos": 2838,
                                    "end": 2843,
                                    "kind": 183,
                                    "id": 0,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "typeName": {
                                        "pos": 2838,
                                        "end": 2843,
                                        "kind": 80,
                                        "id": 0,
                                        "flags": 16777216,
                                        "transformFlags": 0,
                                        "escapedText": "State"
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2884,
                                "end": 2891,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "accessors": {
                "data": {
                    "name": "data",
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "T",
                        "line": 72,
                        "rawdescription": "\n\nGets the model's data through the Proxy.\n",
                        "description": "<p>Gets the model&#39;s data through the Proxy.</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 2268,
                                "end": 2297,
                                "kind": 342,
                                "id": 0,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "tagName": {
                                    "pos": 2269,
                                    "end": 2276,
                                    "kind": 80,
                                    "id": 0,
                                    "flags": 16842752,
                                    "transformFlags": 0,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>Model data.</p>\n",
                                "typeExpression": {
                                    "pos": 2277,
                                    "end": 2280,
                                    "kind": 309,
                                    "id": 0,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "type": {
                                        "pos": 2278,
                                        "end": 2279,
                                        "kind": 183,
                                        "id": 0,
                                        "flags": 16777216,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 1,
                                        "typeName": {
                                            "pos": 2278,
                                            "end": 2279,
                                            "kind": 80,
                                            "id": 0,
                                            "flags": 16777216,
                                            "transformFlags": 0,
                                            "escapedText": "T"
                                        }
                                    }
                                }
                            }
                        ]
                    }
                },
                "state$": {
                    "name": "state$",
                    "getSignature": {
                        "name": "state$",
                        "type": "",
                        "returnType": "Observable<State>",
                        "line": 80,
                        "rawdescription": "\n\nReturns an Observable that notifies changes in the model's state.\n",
                        "description": "<p>Returns an Observable that notifies changes in the model&#39;s state.</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 2436,
                                "end": 2494,
                                "kind": 342,
                                "id": 0,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "tagName": {
                                    "pos": 2437,
                                    "end": 2444,
                                    "kind": 80,
                                    "id": 0,
                                    "flags": 16842752,
                                    "transformFlags": 0,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>Observable of the state.</p>\n",
                                "typeExpression": {
                                    "pos": 2445,
                                    "end": 2464,
                                    "kind": 309,
                                    "id": 0,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "type": {
                                        "pos": 2446,
                                        "end": 2463,
                                        "kind": 183,
                                        "id": 0,
                                        "flags": 16777216,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 1,
                                        "typeName": {
                                            "pos": 2446,
                                            "end": 2456,
                                            "kind": 80,
                                            "id": 0,
                                            "flags": 16777216,
                                            "transformFlags": 0,
                                            "escapedText": "Observable"
                                        },
                                        "typeArguments": [
                                            {
                                                "pos": 2457,
                                                "end": 2462,
                                                "kind": 183,
                                                "id": 0,
                                                "flags": 16777216,
                                                "modifierFlagsCache": 0,
                                                "transformFlags": 1,
                                                "typeName": {
                                                    "pos": 2457,
                                                    "end": 2462,
                                                    "kind": 80,
                                                    "id": 0,
                                                    "flags": 16777216,
                                                    "transformFlags": 0,
                                                    "escapedText": "State"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        ]
                    }
                },
                "state": {
                    "name": "state",
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "State",
                        "line": 88,
                        "rawdescription": "\n\nReturns the current state of the model.\n",
                        "description": "<p>Returns the current state of the model.</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 2647,
                                "end": 2689,
                                "kind": 342,
                                "id": 0,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "tagName": {
                                    "pos": 2648,
                                    "end": 2655,
                                    "kind": 80,
                                    "id": 0,
                                    "flags": 16842752,
                                    "transformFlags": 0,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>Current model state.</p>\n",
                                "typeExpression": {
                                    "pos": 2656,
                                    "end": 2663,
                                    "kind": 309,
                                    "id": 0,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "type": {
                                        "pos": 2657,
                                        "end": 2662,
                                        "kind": 183,
                                        "id": 0,
                                        "flags": 16777216,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 1,
                                        "typeName": {
                                            "pos": 2657,
                                            "end": 2662,
                                            "kind": 80,
                                            "id": 0,
                                            "flags": 16777216,
                                            "transformFlags": 0,
                                            "escapedText": "State"
                                        }
                                    }
                                }
                            }
                        ]
                    }
                }
            },
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IModelState"
            ]
        },
        {
            "name": "User",
            "id": "class-User-fe841ae3504aa687811f2bc984264d50817b0f5db805e320a9204fd9c6fa87ddfe2cef297ca59134f4c7f5ce8ecf82c1046bbc6d79379eeab5530ddca76d97d5",
            "file": "src/app/core/models/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ModelState, IUser } from '@fynnc.models';\r\n\r\nexport class User extends ModelState<IUser> implements IUser {\r\n  private _id?: number;\r\n  private _name?: string;\r\n  private _fullName?: string;\r\n  private _email?: string;\r\n  private _phone?: string;\r\n  private _birthDate?: Date;\r\n  private _gender?: 'male' | 'female' | 'other' | 'not informed';\r\n  private _nationality?: string;\r\n  private _maritalStatus?: 'single' | 'married' | 'divorced' | 'widowed' | 'other';\r\n  private _profession?: string;\r\n  private _academicBackground?: string;\r\n  private _username?: string;\r\n  private _password?: string;\r\n\r\n  constructor(user: IUser = {} as IUser) {\r\n    super(user);\r\n    this._id = user.id;\r\n    this._name = user.name;\r\n    this._fullName = user.fullName;\r\n    this._email = user.email;\r\n    this._phone = user.phone;\r\n    this._birthDate = user.birthDate;\r\n    this._gender = user.gender;\r\n    this._nationality = user.nationality;\r\n    this._maritalStatus = user.maritalStatus;\r\n    this._profession = user.profession;\r\n    this._academicBackground = user.academicBackground;\r\n    this._username = user.username;\r\n    this._password = user.password;\r\n  }\r\n\r\n  get id(): number | undefined {\r\n    return this._id;\r\n  }\r\n  set id(value: number) {\r\n    this._id = value;\r\n  }\r\n\r\n  get name(): string | undefined {\r\n    return this._name;\r\n  }\r\n  set name(value: string) {\r\n    this._name = value;\r\n  }\r\n\r\n  get fullName(): string | undefined {\r\n    return this._fullName;\r\n  }\r\n  set fullName(value: string) {\r\n    this._fullName = value;\r\n  }\r\n\r\n  get email(): string | undefined  {\r\n    return this._email;\r\n  }\r\n  set email(value: string) {\r\n    this._email = value;\r\n  }\r\n\r\n  get phone(): string | undefined {\r\n    return this._phone;\r\n  }\r\n  set phone(value: string) {\r\n    this._phone = value;\r\n  }\r\n\r\n  get birthDate(): Date | undefined {\r\n    return this._birthDate;\r\n  }\r\n  set birthDate(value: Date) {\r\n    this._birthDate = value;\r\n  }\r\n\r\n  get gender(): 'male' | 'female' | 'other' | 'not informed' | undefined {\r\n    return this._gender;\r\n  }\r\n  set gender(value: 'male' | 'female' | 'other' | 'not informed') {\r\n    this._gender = value;\r\n  }\r\n\r\n  get nationality(): string | undefined {\r\n    return this._nationality;\r\n  }\r\n  set nationality(value: string) {\r\n    this._nationality = value;\r\n  }\r\n\r\n  get maritalStatus(): 'single' | 'married' | 'divorced' | 'widowed' | 'other' | undefined {\r\n    return this._maritalStatus;\r\n  }\r\n  set maritalStatus(\r\n    value: 'single' | 'married' | 'divorced' | 'widowed' | 'other'\r\n  ) {\r\n    this._maritalStatus = value;\r\n  }\r\n\r\n  get profession(): string | undefined {\r\n    return this._profession;\r\n  }\r\n  set profession(value: string | undefined) {\r\n    this._profession = value;\r\n  }\r\n\r\n  get academicBackground(): string | undefined {\r\n    return this._academicBackground;\r\n  }\r\n  set academicBackground(value: string | undefined) {\r\n    this._academicBackground = value;\r\n  }\r\n\r\n  get username(): string | undefined {\r\n    return this._username;\r\n  }\r\n  set username(value: string | undefined) {\r\n    this._username = value;\r\n  }\r\n\r\n  get password(): string | undefined {\r\n    return this._password;\r\n  }\r\n  set password(value: string | undefined) {\r\n    this._password = value;\r\n  }\r\n\r\n  toJSON(): Partial<IUser> {\r\n    return {\r\n      id: this.id,\r\n      name: this.name,\r\n      fullName: this.fullName,\r\n      email: this.email,\r\n      phone: this.phone,\r\n      birthDate: this.birthDate,\r\n      gender: this.gender,\r\n      nationality: this.nationality,\r\n      maritalStatus: this.maritalStatus,\r\n      ...(this.profession !== undefined && { profession: this.profession }),\r\n      ...(this.academicBackground !== undefined && { academicBackground: this.academicBackground }),\r\n      ...(this.username !== undefined && { username: this.username }),\r\n      ...(this.password !== undefined && { password: this.password }),\r\n    };\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "user",
                        "type": "IUser",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{} as IUser"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "user",
                        "type": "IUser",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{} as IUser",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "_academicBackground",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_birthDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"male\" | \"female\" | \"other\" | \"not informed\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_maritalStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"single\" | \"married\" | \"divorced\" | \"widowed\" | \"other\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_nationality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_profession",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Original data of the model.</p>\n",
                    "line": 13,
                    "rawdescription": "\nOriginal data of the model.",
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "ModelState"
                    }
                },
                {
                    "name": "_modifiedAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Set<T>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Set that stores modified attributes.</p>\n",
                    "line": 25,
                    "rawdescription": "\nSet that stores modified attributes.",
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "ModelState"
                    }
                },
                {
                    "name": "_proxy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Proxy that intercepts modifications to the data.</p>\n",
                    "line": 16,
                    "rawdescription": "\nProxy that intercepts modifications to the data.",
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "ModelState"
                    }
                },
                {
                    "name": "_state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Current state of the model (ORIGINAL, NEW, MODIFIED, DELETED).</p>\n",
                    "line": 19,
                    "rawdescription": "\nCurrent state of the model (ORIGINAL, NEW, MODIFIED, DELETED).",
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "ModelState"
                    }
                },
                {
                    "name": "_stateSubject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<State>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Observable that notifies state changes.</p>\n",
                    "line": 22,
                    "rawdescription": "\nObservable that notifies state changes.",
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "ModelState"
                    }
                }
            ],
            "methods": [
                {
                    "name": "toJSON",
                    "args": [],
                    "optional": false,
                    "returnType": "Partial<IUser>",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "_createProxy",
                    "args": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates a Proxy to intercept changes to the model's data.\n",
                    "description": "<p>Creates a Proxy to intercept changes to the model&#39;s data.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1443,
                                "end": 1446,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "obj"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1433,
                                "end": 1438,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Original model object.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 1439,
                                "end": 1442,
                                "kind": 309,
                                "id": 0,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "type": {
                                    "pos": 1440,
                                    "end": 1441,
                                    "kind": 183,
                                    "id": 0,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "typeName": {
                                        "pos": 1440,
                                        "end": 1441,
                                        "kind": 80,
                                        "id": 0,
                                        "flags": 16777216,
                                        "transformFlags": 0,
                                        "escapedText": "T"
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1479,
                                "end": 1486,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Proxy of the model object.</p>\n",
                            "returnType": ""
                        },
                        {
                            "tagName": {
                                "pos": 1525,
                                "end": 1532,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ModelState"
                    }
                },
                {
                    "name": "clearModifiedAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears all attributes marked as modified.\n",
                    "description": "<p>Clears all attributes marked as modified.</p>\n",
                    "inheritance": {
                        "file": "ModelState"
                    }
                },
                {
                    "name": "getModifiedAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "[]",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets a list of modified attributes in the model.\n",
                    "description": "<p>Gets a list of modified attributes in the model.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 3975,
                                "end": 3982,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>List of modified attributes.</p>\n",
                            "returnType": "[]"
                        }
                    ],
                    "inheritance": {
                        "file": "ModelState"
                    }
                },
                {
                    "name": "isDeleted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the current state is DELETED.\n",
                    "description": "<p>Checks if the current state is DELETED.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 4707,
                                "end": 4714,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>True if the state is DELETED.</p>\n",
                            "returnType": "boolean"
                        }
                    ],
                    "inheritance": {
                        "file": "ModelState"
                    }
                },
                {
                    "name": "isModified",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the current state is MODIFIED.\n",
                    "description": "<p>Checks if the current state is MODIFIED.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 4513,
                                "end": 4520,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>True if the state is MODIFIED.</p>\n",
                            "returnType": "boolean"
                        }
                    ],
                    "inheritance": {
                        "file": "ModelState"
                    }
                },
                {
                    "name": "isNew",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the current state is NEW.\n",
                    "description": "<p>Checks if the current state is NEW.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 4333,
                                "end": 4340,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>True if the state is NEW.</p>\n",
                            "returnType": "boolean"
                        }
                    ],
                    "inheritance": {
                        "file": "ModelState"
                    }
                },
                {
                    "name": "isOriginal",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the current state is ORIGINAL.\n",
                    "description": "<p>Checks if the current state is ORIGINAL.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 4899,
                                "end": 4906,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>True if the state is ORIGINAL.</p>\n",
                            "returnType": "boolean"
                        }
                    ],
                    "inheritance": {
                        "file": "ModelState"
                    }
                },
                {
                    "name": "markAsDeleted",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMarks the model as DELETED, if allowed.\n",
                    "description": "<p>Marks the model as DELETED, if allowed.</p>\n",
                    "jsdoctags": [],
                    "inheritance": {
                        "file": "ModelState"
                    }
                },
                {
                    "name": "markAsModified",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMarks the model as MODIFIED, if applicable.\n",
                    "description": "<p>Marks the model as MODIFIED, if applicable.</p>\n",
                    "inheritance": {
                        "file": "ModelState"
                    }
                },
                {
                    "name": "markAsNew",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMarks the model as NEW.\n",
                    "description": "<p>Marks the model as NEW.</p>\n",
                    "inheritance": {
                        "file": "ModelState"
                    }
                },
                {
                    "name": "restore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRestores the model to the ORIGINAL state.\nClears the modified attributes.\n",
                    "description": "<p>Restores the model to the ORIGINAL state.\nClears the modified attributes.</p>\n",
                    "inheritance": {
                        "file": "ModelState"
                    }
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "newState",
                            "type": "State",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChanges the current state of the model and notifies observers.\n",
                    "description": "<p>Changes the current state of the model and notifies observers.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2845,
                                "end": 2853,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "newState"
                            },
                            "type": "State",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2831,
                                "end": 2836,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>New state to be set.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 2837,
                                "end": 2844,
                                "kind": 309,
                                "id": 0,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "type": {
                                    "pos": 2838,
                                    "end": 2843,
                                    "kind": 183,
                                    "id": 0,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "typeName": {
                                        "pos": 2838,
                                        "end": 2843,
                                        "kind": 80,
                                        "id": 0,
                                        "flags": 16777216,
                                        "transformFlags": 0,
                                        "escapedText": "State"
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2884,
                                "end": 2891,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ModelState"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": [
                "ModelState"
            ],
            "accessors": {
                "id": {
                    "name": "id",
                    "setSignature": {
                        "name": "id",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "id",
                        "type": "",
                        "returnType": "number | undefined",
                        "line": 35
                    }
                },
                "name": {
                    "name": "name",
                    "setSignature": {
                        "name": "name",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 45,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "name",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 42
                    }
                },
                "fullName": {
                    "name": "fullName",
                    "setSignature": {
                        "name": "fullName",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 52,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "fullName",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 49
                    }
                },
                "email": {
                    "name": "email",
                    "setSignature": {
                        "name": "email",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 59,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 56
                    }
                },
                "phone": {
                    "name": "phone",
                    "setSignature": {
                        "name": "phone",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 66,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 63
                    }
                },
                "birthDate": {
                    "name": "birthDate",
                    "setSignature": {
                        "name": "birthDate",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "Date",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 73,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "Date",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "birthDate",
                        "type": "",
                        "returnType": "Date | undefined",
                        "line": 70
                    }
                },
                "gender": {
                    "name": "gender",
                    "setSignature": {
                        "name": "gender",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "\"male\" | \"female\" | \"other\" | \"not informed\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 80,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "\"male\" | \"female\" | \"other\" | \"not informed\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "gender",
                        "type": "",
                        "returnType": "\"male\" | \"female\" | \"other\" | \"not informed\" | undefined",
                        "line": 77
                    }
                },
                "nationality": {
                    "name": "nationality",
                    "setSignature": {
                        "name": "nationality",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 87,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "nationality",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 84
                    }
                },
                "maritalStatus": {
                    "name": "maritalStatus",
                    "setSignature": {
                        "name": "maritalStatus",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "\"single\" | \"married\" | \"divorced\" | \"widowed\" | \"other\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 94,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "\"single\" | \"married\" | \"divorced\" | \"widowed\" | \"other\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "maritalStatus",
                        "type": "",
                        "returnType": "\"single\" | \"married\" | \"divorced\" | \"widowed\" | \"other\" | undefined",
                        "line": 91
                    }
                },
                "profession": {
                    "name": "profession",
                    "setSignature": {
                        "name": "profession",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 103,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "profession",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 100
                    }
                },
                "academicBackground": {
                    "name": "academicBackground",
                    "setSignature": {
                        "name": "academicBackground",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 110,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "academicBackground",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 107
                    }
                },
                "username": {
                    "name": "username",
                    "setSignature": {
                        "name": "username",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 117,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 114
                    }
                },
                "password": {
                    "name": "password",
                    "setSignature": {
                        "name": "password",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 124,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 121
                    }
                }
            },
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IUser"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-23a5ea4f4193c2dcae8b0e3bccc51280522cc7cd360dfe1719b6d982d30dad0e47f7fb6a33a7bfa5e6e423a92abcafd44819be2358b94667733e5a89f5fcd507",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'FYNNC'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [RouterOutlet],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss'\r\n})\r\nexport class AppComponent {\r\n  title = 'FYNNC';\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "\r\n<router-outlet></router-outlet> \r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #1ea7fd;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "CodePasswordComponent",
            "id": "component-CodePasswordComponent-d2e4630bae97a6e91248a2ba77d8594e240d2ba84fddee2d322841e266b2e286b2e15f2548c83beafdc170b3f22ec3fc7179687a417525cad18bf6dc70e27f83",
            "file": "src/app/core/components/auth/code-password/code-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-code-password",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./code-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "codeForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "digits",
                    "defaultValue": "Array(6).fill(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "inputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'inputRef'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "isCodeValid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "moveFocus",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmitCode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Component, ElementRef, QueryList, ViewChildren } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\n@Component({\r\n  selector: 'app-code-password',\r\n  imports: [\r\n            CommonModule,\r\n            MatFormFieldModule,\r\n            MatInputModule,\r\n            MatButtonModule,\r\n            MatIconModule,\r\n            ReactiveFormsModule\r\n  ],\r\n  templateUrl: './code-password.component.html',\r\n  styleUrl: './code-password.component.scss'\r\n})\r\nexport class CodePasswordComponent {\r\n  codeForm!: FormGroup;\r\n  digits = Array(6).fill(0); \r\n  isCodeValid: boolean = false;\r\n\r\n  @ViewChildren('inputRef') inputs!: QueryList<ElementRef>;\r\n\r\n  constructor(private fb: FormBuilder, private http: HttpClient) {}\r\n\r\n  ngOnInit() {\r\n    this.codeForm = this.fb.group({});\r\n    this.digits.forEach((_, i) => {\r\n      this.codeForm.addControl(`digit${i}`, new FormControl('', [Validators.required, Validators.pattern('[0-9]')]));\r\n    });\r\n  }\r\n\r\n  moveFocus(event: any, index: number) {\r\n    const input = event.target;\r\n    if (input.value.length === 1 && index < 5) {\r\n      this.inputs.toArray()[index + 1].nativeElement.focus();\r\n    } else if (event.key === 'Backspace' && index > 0) {\r\n      this.inputs.toArray()[index - 1].nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  onSubmitCode() {\r\n    if (this.codeForm.valid) {\r\n      const code = this.digits.map((_, i) => this.codeForm.get(`digit${i}`)?.value).join('');\r\n\r\n      this.http.post('/api/validate-reset-code', { code }).subscribe({\r\n        next: () => {\r\n          this.isCodeValid = true;\r\n          console.log('Código validado com sucesso!');\r\n        },\r\n        error: (err) => {\r\n          console.error('Erro ao validar código:', err);\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./code-password.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<form [formGroup]=\"codeForm\" (ngSubmit)=\"onSubmitCode()\">\r\n\r\n    <div class=\"code-instruction\">\r\n      <p>Por favor, insira o código que você recebeu por e-mail.</p>\r\n    </div>\r\n  \r\n    <div class=\"code-input-container\">\r\n      <input \r\n        *ngFor=\"let digit of digits; let i = index\"\r\n        #inputRef\r\n        matInput\r\n        maxlength=\"1\"\r\n        class=\"code-input\"\r\n        type=\"text\"\r\n        [formControlName]=\"'digit' + i\"\r\n        (input)=\"moveFocus($event, i)\"\r\n      />\r\n    </div>\r\n  \r\n\r\n    <mat-error *ngIf=\"codeForm.invalid && codeForm.touched\" style=\"text-align: center; display: flex; justify-content: center; align-items: center;\">\r\n      Certifique-se de preencher corretamente os 6 dígitos.\r\n    </mat-error>\r\n\r\n    <div *ngIf=\"isCodeValid\" class=\"success-message\">\r\n      ✅ Código validado com sucesso!\r\n    </div>\r\n  </form>\r\n  "
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-2617ebc963f41994b85c7a19ac77392dedde173893335b230a1bb398d77bc26fe9c006dfc65a2aef1f95673922e32dfeb0575f666dd64ddf7704f9f85cc29661",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "maxTentativas",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "singIn",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "singUp",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "tentativasFalhas",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "singInForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "singUpForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "SignUpFormComponent",
                    "type": "component"
                },
                {
                    "name": "SignInFormComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SignUpFormComponent } from \"../core/components/auth/sign-up-form-component/sign-up-form-component.component\";\r\nimport { SignInFormComponent } from \"../core/components/auth/sign-in-form-component/sign-in-form-component.component\";\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n  imports: [\r\n    CommonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    ReactiveFormsModule,\r\n    SignUpFormComponent,\r\n    SignInFormComponent\r\n],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  form!: FormGroup;\r\n  tentativasFalhas: number = 0;\r\n  maxTentativas: number = 3;\r\n  isLoading: boolean = false;\r\n  singUp: boolean = false;\r\n  singIn: boolean = true;\r\n\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]],\r\n    });\r\n  }\r\n\r\n  singUpForm(){\r\n    this.singUp = true\r\n    this.singIn = false\r\n  }\r\n  singInForm() {\r\n    this.singUp = false;\r\n    setTimeout(() => {\r\n      this.singIn = true;\r\n    }, 100);\r\n    if (this.form.valid) {\r\n      return;\r\n    } else {\r\n      console.log('Form is invalid');\r\n      this.tentativasFalhas++;\r\n      this.form.markAllAsTouched();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  display: flex;\r\n  height: 100vh;\r\n  justify-content: left;\r\n}\r\n\r\n.logo {\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.logo span {\r\n  font-size: 6em;\r\n  background-image: linear-gradient(to right, #6a82fb, #fc5c7d);\r\n  -webkit-background-clip: text;\r\n  color: transparent;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  animation: escrever 2s linear forwards;\r\n}\r\n\r\n@keyframes escrever {\r\n  0% {\r\n      clip-path: inset(0 100% 0 0);\r\n  }\r\n  100% {\r\n      clip-path: inset(0 0 0 0);\r\n  }\r\n}\r\n.form {\r\n  width: 390px;\r\n  background-color: #19202b;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  color: white;\r\n  height: 100vh;\r\n  transition: width 0.3s ease; \r\n}\r\n\r\n.form.expanded {\r\n  width: 500px; \r\n}\r\n\r\n\r\n.form-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  max-width: 400px;\r\n  margin: auto;\r\n  .custom-input {\r\n    width: 100%;\r\n    color: white\r\n  }\r\n\r\n  .custom-name-field {\r\n    font-weight: bold;\r\n    color: white;\r\n  }\r\n}\r\n.button-container {\r\n  display: flex;\r\n  gap: 10px; \r\n  justify-content: center;\r\n  align-items: center; \r\n\r\n  width: 100%;\r\n}\r\n\r\nbutton {\r\n  margin-top: 0; \r\n  flex: 1;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  align-self: auto;\r\n\r\n  &.btn-primary {\r\n    color: #fff;\r\n    background-color: #4e5c6e;\r\n\r\n    &:hover {\r\n      background-color: #3b495e;\r\n    }\r\n  }\r\n\r\n  &.btn-secondary {\r\n    color: #4e5c6e;\r\n    background-color: #f1f1f1;\r\n\r\n    &:hover {\r\n      background-color: #e2e2e2;\r\n    }\r\n  }\r\n}\r\n.welcome-text {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  color: white;\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.welcome-text span {\r\n  font-size: 2.5em;\r\n  font-weight: bold;\r\n  color: #fff;\r\n  background-image: linear-gradient(to right, #6a82fb, #fc5c7d);\r\n  -webkit-background-clip: text;\r\n  color: transparent;\r\n  animation: fadeIn 1s ease-in-out;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n}\r\n.forget-password{\r\n  font-size: small;\r\n  justify-content: end;\r\n  display: flex;\r\n}\r\n.login {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  color: white;\r\n  margin-bottom: 20px;\r\n}\r\n.google-button {\r\n  color: rgb(0, 0, 0);\r\n  margin: 20px;\r\n  width: 100%;\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 20px;\r\n  background-color: #ffffff;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n  transition: background-color 0.3s ease;\r\n  display: flex; \r\n  align-items: center; \r\n  justify-content: center; \r\n}\r\n\r\n.google-button:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.google-icon {\r\n  width: 20px;\r\n  height: 20px;\r\n  margin-right: 10px; \r\n}\r\n\r\n.or-separator {\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  margin: 20px 0;\r\n}\r\n\r\n.or-separator span {\r\n  padding: 0 10px;\r\n  z-index: 1;\r\n  position: relative;\r\n}\r\n\r\n.or-separator::before,\r\n.or-separator::after {\r\n  content: \"\";\r\n  flex-grow: 1;\r\n  height: 1px;\r\n  background-color: #ccc;\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"logo\">\r\n    <span>FYNNC</span>\r\n  </div>\r\n  <div class=\"form\" [ngClass]=\"{'expanded': singUp}\">\r\n    <app-sign-in-form-component *ngIf=\"singIn\"(goBackToLogin)=\"singUpForm()\"></app-sign-in-form-component>\r\n    <app-sign-up-form-component *ngIf=\"singUp\" (goBackToLogin)=\"singInForm()\"></app-sign-up-form-component>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "NewPasswordComponent",
            "id": "component-NewPasswordComponent-83f093cb3aadd87c20907b639f9b1c077d3685391de6a98190c2dae7d998656a98cc1d70779bbe40e566f56903c0eff58f9abaf83589cb0bb9058aace556ebad",
            "file": "src/app/core/components/auth/new-password/new-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-new-password",
            "styleUrls": [
                "./new-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./new-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isPasswordValid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "passwordForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "checkPasswords",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmitPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\n@Component({\r\n  selector: 'app-new-password',\r\n  imports: [\r\n    CommonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  templateUrl: './new-password.component.html',\r\n  styleUrls: ['./new-password.component.scss']\r\n})\r\nexport class NewPasswordComponent {\r\n  passwordForm!: FormGroup;\r\n  isPasswordValid = false;\r\n\r\n  constructor(private fb: FormBuilder) {}\r\n\r\n  ngOnInit() {\r\n    this.passwordForm = this.fb.group({\r\n      newPassword: [\r\n        '',\r\n        [\r\n          Validators.required,\r\n          Validators.minLength(8),\r\n          Validators.pattern(/^(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/)\r\n        ]\r\n      ],\r\n      confirmPassword: ['', [Validators.required]]\r\n    });\r\n    this.passwordForm.get('confirmPassword')?.valueChanges.subscribe(() => {\r\n      this.checkPasswords();\r\n    });\r\n  }\r\n\r\n  checkPasswords() {\r\n    const newPassword = this.passwordForm?.get('newPassword')?.value;\r\n    const confirmPassword = this.passwordForm?.get('confirmPassword')?.value;\r\n\r\n    if (newPassword && confirmPassword && newPassword !== confirmPassword) {\r\n      this.passwordForm?.get('confirmPassword')?.setErrors({ mismatch: true });\r\n    } else {\r\n      this.passwordForm?.get('confirmPassword')?.setErrors(null);\r\n    }\r\n  }\r\n\r\n  onSubmitPassword() {\r\n    if (this.passwordForm?.valid) {\r\n      this.isPasswordValid = true;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".password-instruction {\r\n    text-align: center;\r\n    font-size: 1.2rem;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .password-input-container {\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  .success-message {\r\n    color: green;\r\n    text-align: center;\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  button {\r\n    display: block;\r\n    width: 100%;\r\n    margin-top: 20px;\r\n  }\r\n  ",
                    "styleUrl": "./new-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<form [formGroup]=\"passwordForm\" (ngSubmit)=\"onSubmitPassword()\">\r\n    <div class=\"password-instruction\">\r\n      <p>Por favor, insira sua nova senha.</p>\r\n    </div>\r\n  \r\n    <div class=\"password-input-container\">\r\n      <label for=\"newPassword\">Nova Senha</label>\r\n      <input \r\n        id=\"newPassword\"\r\n        type=\"password\"\r\n        formControlName=\"newPassword\"\r\n        matInput\r\n        required\r\n        minlength=\"8\"\r\n        placeholder=\"Digite sua nova senha\"\r\n      />\r\n      <mat-error *ngIf=\"passwordForm.get('newPassword')?.hasError('required') && passwordForm.get('newPassword')?.touched\">\r\n        A senha é obrigatória.\r\n      </mat-error>\r\n      <mat-error *ngIf=\"passwordForm.get('newPassword')?.hasError('minlength') && passwordForm.get('newPassword')?.touched\">\r\n        A senha deve ter no mínimo 8 caracteres.\r\n      </mat-error>\r\n      <mat-error *ngIf=\"passwordForm.get('newPassword')?.hasError('pattern') && passwordForm.get('newPassword')?.touched\">\r\n        A senha deve conter pelo menos uma letra maiúscula, um número e um caractere especial.\r\n      </mat-error>\r\n    </div>\r\n  \r\n    <div class=\"password-input-container\">\r\n      <label for=\"confirmPassword\">Confirmar Senha</label>\r\n      <input \r\n        id=\"confirmPassword\"\r\n        type=\"password\"\r\n        formControlName=\"confirmPassword\"\r\n        matInput\r\n        required\r\n        placeholder=\"Confirme sua nova senha\"\r\n      />\r\n      <mat-error *ngIf=\"passwordForm.get('confirmPassword')?.hasError('required') && passwordForm.get('confirmPassword')?.touched\">\r\n        A confirmação da senha é obrigatória.\r\n      </mat-error>\r\n      <mat-error *ngIf=\"passwordForm.get('confirmPassword')?.hasError('mismatch') && passwordForm.get('confirmPassword')?.touched\">\r\n        As senhas não coincidem.\r\n      </mat-error>\r\n    </div>\r\n  \r\n    <div *ngIf=\"isPasswordValid\" class=\"success-message\">\r\n      ✅ Senha alterada com sucesso!\r\n    </div>\r\n  \r\n    <button mat-button type=\"submit\" [disabled]=\"passwordForm.invalid\">Alterar Senha</button>\r\n  </form>\r\n  "
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: #1ea7fd;\n  text-decoration: none;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #66bf3c;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ResetPasswordComponent",
            "id": "component-ResetPasswordComponent-fcbc88bdf8b5783644098d6d121a0e07f823d8555b329d49efbe545005eac4a206ce21e634b77f3559fa4eec2ad10346b3f38bacaec03084f53f94b26651dc23",
            "file": "src/app/core/components/auth/reset-password/reset-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./reset-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "isCodeSent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openCodeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormRecord, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { CodePasswordComponent } from '../code-password/code-password.component';\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  imports: [\r\n        CommonModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        ReactiveFormsModule\r\n  ],\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrl: './reset-password.component.scss'\r\n})\r\nexport class ResetPasswordComponent {\r\n  form!: FormGroup\r\n  isCodeSent: boolean = false;\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      emaio: ['',[]]\r\n    })\r\n  }\r\n  constructor(\r\n    private readonly fb: FormBuilder,\r\n    private dialog: MatDialog\r\n  ){}\r\n  \r\n  onSubmit(){\r\n    this.dialog.closeAll()\r\n  }\r\n  openCodeDialog() {\r\n    const dialogRef = this.dialog.open(CodePasswordComponent, {\r\n      width: '600px'\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result?.success) {\r\n        console.log('Código validado com sucesso!');\r\n      } else {\r\n        console.log('Diálogo fechado sem validação.');\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./reset-password.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\"  class=\"form-container\">\r\n      <mat-form-field appearance=\"outline\" class=\"custom-input\">\r\n        <mat-label>Email:</mat-label>\r\n        <input matInput type=\"email\" formControlName=\"email\" placeholder=\"Entre com email registrado\">\r\n      </mat-form-field>\r\n      <div class=\"button-container\">\r\n        <button type=\"submit\" class=\"btn-primary\">Encontrar conta</button>\r\n      </div>\r\n    </form>\r\n    <div *ngIf=\"isCodeSent\" class=\"btn-secondary\">\r\n      Um código foi enviado para o seu e-mail. Verifique sua caixa de entrada!\r\n    </div>\r\n\r\n  "
        },
        {
            "name": "SignInFormComponent",
            "id": "component-SignInFormComponent-8696a09a8aed196dc3889732e4302b90aef867fc155eee743a1489db218a7d0b8358e6d4604ccb6df4ec1cc371467b028513801796b72a0c48346bf6e9324948",
            "file": "src/app/core/components/auth/sign-in-form-component/sign-in-form-component.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-in-form-component",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sign-in-form-component.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "goBackToLogin",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "maxTentativas",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "mostrarCaptcha",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "mostrarEsqueceuSenha",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "recaptchaResponse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "tentativasFalhas",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "changeToSingUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCaptchaResolved",
                    "args": [
                        {
                            "name": "captchaResponse",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "captchaResponse",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openCodeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openForgotPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "verificarTentativas",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AuthService } from '../service/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { IUser } from '@fynnc.models';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ResetPasswordComponent } from '../reset-password/reset-password.component';\r\nimport { CodePasswordComponent } from '../code-password/code-password.component';\r\n\r\n@Component({\r\n  selector: 'app-sign-in-form-component',\r\n  templateUrl: './sign-in-form-component.component.html',\r\n  styleUrl: './sign-in-form-component.component.scss',\r\n  imports: [\r\n    CommonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    ReactiveFormsModule\r\n  ],\r\n})\r\nexport class SignInFormComponent {\r\n  @Output() goBackToLogin = new EventEmitter<void>();\r\n  form!: FormGroup;\r\n  errorMessage: string | undefined\r\n  tentativasFalhas: number = 0;\r\n  maxTentativas: number = 3;\r\n  isLoading: boolean = false;\r\n  recaptchaResponse: string | undefined\r\n  constructor(\r\n    private readonly fb: FormBuilder,\r\n    private readonly authService: AuthService,\r\n    private readonly router: Router,\r\n    private readonly dialog: MatDialog\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]],\r\n      recaptcha: ['', Validators.required]\r\n    });\r\n  }\r\n  changeToSingUp() {\r\n    this.goBackToLogin.emit();\r\n  }\r\n\r\n  openForgotPassword() {\r\n    const dialogRef = this.dialog.open(ResetPasswordComponent, {\r\n      width: '600px',\r\n      maxWidth: '90vw',\r\n      backdropClass: 'custom-backdrop'\r\n    });\r\n    dialogRef.afterClosed().subscribe((sendCode) => {\r\n    //  if (!sendCode) return;\r\n      this.openCodeDialog();\r\n    });\r\n  }\r\n\r\n  openCodeDialog() {\r\n    const dialogRef = this.dialog.open(CodePasswordComponent, {\r\n      width: '600px',\r\n      backdropClass: 'custom-backdrop'\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result?.success) {\r\n        console.log('Código validado com sucesso!');\r\n      } else {\r\n        console.log('Diálogo fechado sem validação.');\r\n      }\r\n    });\r\n  }\r\n  onCaptchaResolved(captchaResponse: string | null | undefined) {\r\n    if (captchaResponse) {\r\n      this.recaptchaResponse = captchaResponse;\r\n      this.form.get('recaptcha')?.setValue(captchaResponse);\r\n      this.form.get('recaptcha')?.updateValueAndValidity();\r\n    }\r\n  }\r\nmostrarCaptcha: boolean = false;\r\nmostrarEsqueceuSenha: boolean = false;\r\n\r\nverificarTentativas(): void {\r\n  if (this.tentativasFalhas >= this.maxTentativas) {\r\n    setTimeout(() => {\r\n      this.mostrarEsqueceuSenha = true;\r\n      this.mostrarCaptcha = true;\r\n    }, 500); // Delay de 500ms\r\n  }\r\n}\r\n\r\n  onSubmit(): void {\r\n    if (this.tentativasFalhas >= this.maxTentativas) {\r\n      this.form.get('recaptcha')?.setValidators([Validators.required]);\r\n      this.form.get('recaptcha')?.updateValueAndValidity();\r\n    }\r\n\r\n    if (!this.form.valid) {\r\n      this.tentativasFalhas += 1;\r\n      this.form.markAllAsTouched();\r\n      return;\r\n    }\r\n\r\n    const user: IUser = this.form.value;\r\n    this.authService.login(user.email, user.password).subscribe({\r\n      next: (response) => {\r\n        const token = response.token;\r\n        this.authService.saveToken(token);\r\n        this.router.navigate(['/home']);\r\n        this.tentativasFalhas = 0;\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.errorMessage = 'Login falhou. Verifique suas credenciais.';\r\n        console.error('Erro no login:', error);\r\n        this.tentativasFalhas += 1;\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./sign-in-form-component.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"welcome-text\">\r\n  <span>Olá, seja bem-vindo!</span>\r\n</div>\r\n\r\n<div class=\"login-options\">\r\n  <div class=\"login\">\r\n    <button class=\"google-button\">\r\n      <img src=\"assets/imagens/google.png\" alt=\"Google Icon\" class=\"google-icon\" />\r\n      Entrar com o Google\r\n    </button>\r\n  </div>\r\n  <div class=\"or-separator\"><span>ou</span></div> \r\n  <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" class=\"form-container\">\r\n    <mat-form-field appearance=\"outline\" class=\"custom-input\">\r\n      <mat-label>Email:</mat-label>\r\n      <input matInput formControlName=\"email\" placeholder=\"Enter email\" autocomplete=\"off\"  style=\"color: white;\" />\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" class=\"custom-input\">\r\n      <mat-label>Senha:</mat-label>\r\n      <input matInput formControlName=\"password\" type=\"password\" placeholder=\"Enter password\" style=\"color: white;\"/>\r\n    </mat-form-field>\r\n    <span \r\n    *ngIf=\"tentativasFalhas >= maxTentativas\" \r\n    style=\"color: rgb(231, 85, 75); cursor: pointer; text-decoration: underline;\" \r\n    (click)=\"openForgotPassword()\"\r\n  >\r\n    Esqueceu a senha?\r\n  </span>\r\n  \r\n    <div class=\"button-container\">\r\n      <button type=\"submit\" class=\"btn-secondary\" (click)=\"changeToSingUp()\">Registrar</button>\r\n      <button type=\"submit\" class=\"btn-primary\">Entrar</button>\r\n    </div>\r\n  </form>\r\n<!-- </div> -->\r\n"
        },
        {
            "name": "SignUpFormComponent",
            "id": "component-SignUpFormComponent-5c5f6be60a2a1ab6196f6fea8700dc81159351fee78fc77ba698fdfabca92e4c50ae89ed422abc5951b73f4186d8bf432f3131ea0870127b22da55ccb9e7b102",
            "file": "src/app/core/components/auth/sign-up-form-component/sign-up-form-component.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up-form-component",
            "styleUrls": [
                "./sign-up-form-component.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up-form-component.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "goBackToLogin",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "hideConfirmPassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "hidePassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "passwordMatchValidator",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sanitizedOutput",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SafeHtml",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "changeToSingIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sanitizeString",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sanitizeWithDomSanitizer",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormGroup, ReactiveFormsModule, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'app-sign-up-form-component',\r\n  templateUrl: './sign-up-form-component.component.html',\r\n  styleUrls: ['./sign-up-form-component.component.scss'],\r\n  imports: [\r\n    CommonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n})\r\nexport class SignUpFormComponent implements OnInit {\r\n  form!: FormGroup;\r\n  hidePassword = true;\r\n    hideConfirmPassword = true;\r\n  sanitizedOutput: SafeHtml = '';\r\n\r\n  @Output() goBackToLogin = new EventEmitter<void>();\r\n\r\n  private passwordMatchValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const password = control.get('password')?.value;\r\n    const confirmPassword = control.get('confirmPassword')?.value;\r\n\r\n    if (password && confirmPassword && password !== confirmPassword) {\r\n      control.get('confirmPassword')?.setErrors({ mismatch: true });\r\n      return { mismatch: true };\r\n    } else {\r\n      control.get('confirmPassword')?.setErrors(null);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  constructor(private fb: FormBuilder, private sanitizer: DomSanitizer) {}\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.nonNullable.group({\r\n      name: ['', [Validators.required, Validators.pattern(/^[a-zA-ZÀ-ÿ\\s]+$/)]],\r\n      fullName: ['', [Validators.required, Validators.pattern(/^[a-zA-ZÀ-ÿ\\s]+$/)]],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      phone: ['', [Validators.required, Validators.pattern(/^\\d{10,11}$/)]],\r\n      birthDate: ['', Validators.required],\r\n      gender: ['', Validators.required],\r\n      nationality: ['', Validators.required],\r\n      maritalStatus: ['', Validators.required],\r\n      profession: ['', [Validators.required, Validators.pattern(/^[a-zA-ZÀ-ÿ\\s]+$/)]],\r\n      academicBackground: ['', Validators.required],\r\n      username: ['', [Validators.required, Validators.pattern(/^[a-zA-Z0-9_]+$/)]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]],\r\n      confirmPassword: ['', [Validators.required]],\r\n    }, { validators: this.passwordMatchValidator });\r\n  }\r\n\r\n\r\n  private sanitizeString(input: string): string {\r\n    return input\r\n      .replace(/<script.*?>.*?<\\/script>/gim, '')\r\n      .replace(/<\\/?[^>]+(>|$)/g, '')\r\n      .replace(/javascript:/gi, '')\r\n      .trim();\r\n  }\r\n\r\n  private sanitizeWithDomSanitizer(input: string): SafeHtml {\r\n    return this.sanitizer.bypassSecurityTrustHtml(this.sanitizeString(input));\r\n  }\r\n\r\n\r\n  changeToSingIn() {\r\n    this.goBackToLogin.emit();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.valid) {\r\n      const sanitizedData = Object.keys(this.form.controls).reduce((acc, key) => {\r\n        acc[key] = this.sanitizeWithDomSanitizer(this.form.get(key)?.value || ''); \r\n        return acc;\r\n      }, {} as Record<string, SafeHtml>); \r\n      console.log('Dados Sanitizados:', sanitizedData);\r\n    } else {\r\n      console.warn('Formulário inválido. Corrija os erros.');\r\n      this.form.markAllAsTouched();\r\n    }\r\n  }\r\n  \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form {\r\n    width: 390px;\r\n    background-color: #19202b;\r\n    padding: 20px;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n    color: white;\r\n    height: 100vh;\r\n    transition: width 0.3s ease;\r\n  \r\n    &.expanded {\r\n      width: 500px;\r\n    }\r\n  }\r\n  \r\n  .form-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 16px;\r\n    max-width: 400px;\r\n    margin: auto;\r\n  \r\n    .custom-input {\r\n      width: 100%;\r\n      color: white;\r\n    }\r\n  \r\n    .custom-name-field {\r\n      font-weight: bold;\r\n      color: white;\r\n    }\r\n  \r\n    .button-container {\r\n      display: flex;\r\n      gap: 10px;\r\n      justify-content: center;\r\n      align-items: center;\r\n      width: 100%;\r\n    }\r\n  \r\n    button {\r\n      margin-top: 0;\r\n      flex: 1;\r\n      padding: 10px 20px;\r\n      border-radius: 5px;\r\n      border: none;\r\n      cursor: pointer;\r\n      font-size: 14px;\r\n      align-self: auto;\r\n  \r\n      &.btn-primary {\r\n        color: #fff;\r\n        background-color: #4e5c6e;\r\n  \r\n        &:hover {\r\n          background-color: #3b495e;\r\n          transform: translateY(-2px);\r\n        }\r\n      }\r\n  \r\n      &.btn-secondary {\r\n        color: #4e5c6e;\r\n        background-color: #f1f1f1;\r\n  \r\n        &:hover {\r\n          background-color: #e2e2e2;\r\n          transform: translateY(-2px);\r\n        }\r\n      }\r\n    }\r\n  \r\n    .form-fields {\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      gap: 16px;\r\n  \r\n      mat-form-field {\r\n        flex: 1 1 100%;\r\n        max-width: 100%;\r\n  \r\n        &.half-width {\r\n          flex: 1 1 48%;\r\n        }\r\n  \r\n        input {\r\n          color: white;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  .welcome-text {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    color: white;\r\n    margin-bottom: 20px;\r\n    text-align: center;\r\n  }\r\n  \r\n  .welcome-text span {\r\n    font-size: 1.7em;\r\n    font-weight: bold;\r\n    color: #fff;\r\n    background-image: linear-gradient(to right, #6a82fb, #fc5c7d);\r\n    -webkit-background-clip: text;\r\n    color: transparent;\r\n    animation: fadeIn 1s ease-in-out;\r\n  }\r\n  \r\n  @keyframes fadeIn {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n  \r\n  .forget-password {\r\n    font-size: small;\r\n    justify-content: end;\r\n    display: flex;\r\n  }\r\n  \r\n  .login {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    color: white;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .google-button {\r\n    color: rgb(0, 0, 0);\r\n    margin: 20px;\r\n    width: 100%;\r\n    padding: 10px 20px;\r\n    border: none;\r\n    border-radius: 20px;\r\n    background-color: #ffffff;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n    transition: background-color 0.3s ease;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n  \r\n  .google-button:hover {\r\n    background-color: #f0f0f0;\r\n  }\r\n  \r\n  .google-icon {\r\n    width: 20px;\r\n    height: 20px;\r\n    margin-right: 10px;\r\n  }\r\n  \r\n  .or-separator {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    margin: 20px 0;\r\n  }\r\n  \r\n  .or-separator span {\r\n    padding: 0 10px;\r\n    z-index: 1;\r\n    position: relative;\r\n  }\r\n  \r\n  .or-separator::before,\r\n  .or-separator::after {\r\n    content: \"\";\r\n    flex-grow: 1;\r\n    height: 1px;\r\n    background-color: #ccc;\r\n  }\r\n  \r\n\r\n",
                    "styleUrl": "./sign-up-form-component.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" class=\"form-container\">\r\n\r\n    <div class=\"form-fields\">\r\n\r\n        <div class=\"welcome-text\">\r\n            <span>Quase lá! Complete seu cadastro.</span>\r\n          </div>\r\n          \r\n        <mat-form-field appearance=\"outline\" class=\"custom-input\">\r\n            <mat-label>Nome Completo</mat-label>\r\n            <input matInput id=\"fullName\" formControlName=\"fullName\" type=\"text\" required />\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\" class=\"custom-input\">\r\n            <mat-label>Email</mat-label>\r\n            <input matInput id=\"email\" formControlName=\"email\" type=\"email\" required />\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\" class=\"custom-input half-width\">\r\n            <mat-label>Telefone</mat-label>\r\n            <input matInput id=\"phone\" formControlName=\"phone\" type=\"text\" required />\r\n        </mat-form-field>\r\n    \r\n        <mat-form-field appearance=\"outline\" class=\"custom-input half-width\">\r\n            <mat-label>Data de Nascimento</mat-label>\r\n            <input matInput id=\"birthDate\" formControlName=\"birthDate\" type=\"date\" required />\r\n        </mat-form-field>\r\n    </div>\r\n    <mat-form-field appearance=\"outline\" class=\"custom-input\" style=\"position: relative;\">\r\n        <mat-label>Senha</mat-label>\r\n        <input matInput \r\n               id=\"password\" \r\n               formControlName=\"password\" \r\n               [type]=\"hidePassword ? 'password' : 'text'\" \r\n               required \r\n               style=\"color: white;\"/>\r\n        <button mat-icon-button \r\n                matSuffix \r\n                (click)=\"hidePassword = !hidePassword\" \r\n                [attr.aria-label]=\"'Toggle password visibility'\" \r\n                [attr.aria-pressed]=\"hidePassword\"\r\n                style=\"margin-right: 8px; display: flex; align-items: center; font-size: 20px; padding: 0; height: 36px; width: 36px;\">\r\n            <mat-icon style=\"color: rgba(255, 255, 255, 0.7);\"> \r\n                {{ hidePassword ? 'visibility_off' : 'visibility' }}\r\n            </mat-icon>\r\n        </button>\r\n    </mat-form-field>\r\n    \r\n    <mat-form-field appearance=\"outline\" class=\"custom-input\" style=\"position: relative;\">\r\n        <mat-label>Confirmar Senha</mat-label>\r\n        <input matInput \r\n               id=\"confirmPassword\" \r\n               formControlName=\"confirmPassword\" \r\n               [type]=\"hideConfirmPassword ? 'password' : 'text'\" \r\n               required \r\n               style=\"color: white;\"/>\r\n        <button mat-icon-button \r\n                matSuffix \r\n                (click)=\"hideConfirmPassword = !hideConfirmPassword\" \r\n                [attr.aria-label]=\"'Toggle confirm password visibility'\" \r\n                [attr.aria-pressed]=\"hideConfirmPassword\"\r\n                style=\"margin-right: 8px; display: flex; align-items: center; font-size: 20px; padding: 0; height: 36px; width: 36px;\">\r\n            <mat-icon style=\"color: rgba(255, 255, 255, 0.7);\"> \r\n                {{ hideConfirmPassword ? 'visibility_off' : 'visibility' }}\r\n            </mat-icon>\r\n        </button>\r\n        <div *ngIf=\"form.get('confirmPassword')?.touched && form.get('confirmPassword')?.invalid\">\r\n            <small class=\"text-danger\">As senhas não são iguais.</small>\r\n        </div>\r\n    </mat-form-field>\r\n    \r\n    \r\n\r\n    <div class=\"button-container\">\r\n        <button class=\"btn-secondary\" (click)=\"changeToSingIn()\">Voltar</button>\r\n        <button type=\"submit\" class=\"btn-primary\">Finalizar Cadastro</button>\r\n      </div>\r\n</form>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "angularApp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new AngularNodeAppEngine()"
            },
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "express()"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes), provideClientHydration(withEventReplay()), provideAnimationsAsync(),  provideHttpClient()]\r\n}"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => bootstrapApplication(AppComponent, config)"
            },
            {
                "name": "browserDistFolder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "resolve(serverDistFolder, '../browser')"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
            },
            {
                "name": "reqHandler",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createNodeRequestHandler(app)",
                "rawdescription": "The request handler used by the Angular CLI (dev-server and during build).",
                "description": "<p>The request handler used by the Angular CLI (dev-server and during build).</p>\n"
            },
            {
                "name": "serverConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideServerRendering(),\r\n    provideServerRoutesConfig(serverRoutes)\r\n  ]\r\n}"
            },
            {
                "name": "serverDistFolder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "dirname(fileURLToPath(import.meta.url))"
            },
            {
                "name": "serverRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ServerRoute[]",
                "defaultValue": "[\r\n  {\r\n    path: '**',\r\n    renderMode: RenderMode.Prerender\r\n  }\r\n]"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "State",
                "childs": [
                    {
                        "name": "NEW",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NEW"
                    },
                    {
                        "name": "MODIFIED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MODIFIED"
                    },
                    {
                        "name": "DELETED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DELETED"
                    },
                    {
                        "name": "ORIGINAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ORIGINAL"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enum/state.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/server.ts": [
                {
                    "name": "angularApp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new AngularNodeAppEngine()"
                },
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "express()"
                },
                {
                    "name": "browserDistFolder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "resolve(serverDistFolder, '../browser')"
                },
                {
                    "name": "reqHandler",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createNodeRequestHandler(app)",
                    "rawdescription": "The request handler used by the Angular CLI (dev-server and during build).",
                    "description": "<p>The request handler used by the Angular CLI (dev-server and during build).</p>\n"
                },
                {
                    "name": "serverDistFolder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "dirname(fileURLToPath(import.meta.url))"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes), provideClientHydration(withEventReplay()), provideAnimationsAsync(),  provideHttpClient()]\r\n}"
                }
            ],
            "src/main.server.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => bootstrapApplication(AppComponent, config)"
                }
            ],
            "src/app/app.config.server.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
                },
                {
                    "name": "serverConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideServerRendering(),\r\n    provideServerRoutesConfig(serverRoutes)\r\n  ]\r\n}"
                }
            ],
            "src/app/app.routes.server.ts": [
                {
                    "name": "serverRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ServerRoute[]",
                    "defaultValue": "[\r\n  {\r\n    path: '**',\r\n    renderMode: RenderMode.Prerender\r\n  }\r\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/core/enum/state.enum.ts": [
                {
                    "name": "State",
                    "childs": [
                        {
                            "name": "NEW",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NEW"
                        },
                        {
                            "name": "MODIFIED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MODIFIED"
                        },
                        {
                            "name": "DELETED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DELETED"
                        },
                        {
                            "name": "ORIGINAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ORIGINAL"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enum/state.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 15,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/components/auth/code-password/code-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CodePasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/auth/new-password/new-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/auth/reset-password/reset-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/auth/service/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 66,
                "coverageCount": "6/9",
                "status": "good"
            },
            {
                "filePath": "src/app/core/components/auth/sign-in-form-component/sign-in-form-component.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/auth/sign-up-form-component/sign-up-form-component.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/i-state.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IModelState",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/i-user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUser",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/state.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ModelState",
                "coveragePercent": 100,
                "coverageCount": "19/19",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/models/user.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 51,
                "coverageCount": "17/33",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EstadoService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/main.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "angularApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "browserDistFolder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reqHandler",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverDistFolder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}